# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'd:\project\toolbox\.qt_for_python\uic\test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import winreg
import img
import os
from threading import Thread
import uuid 
from pypdf import PdfReader
from pdf2image import convert_from_path
from PIL import Image
import os
from glob import glob

def get_desktop():
    key =winreg.OpenKey(winreg.HKEY_CURRENT_USER,r'Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders')
    return winreg.QueryValueEx(key, "Desktop")[0]

qmut = QtCore.QMutex()
finishedPages = 0
threadNum = 4

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(996, 800)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(100)
        sizePolicy.setVerticalStretch(100)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.tab)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButtonInput = QtWidgets.QPushButton(self.tab)
        self.pushButtonInput.setObjectName("pushButtonInput")
        self.verticalLayout.addWidget(self.pushButtonInput)
        self.pushButtonOutput = QtWidgets.QPushButton(self.tab)
        self.pushButtonOutput.setObjectName("pushButtonOutput")
        self.verticalLayout.addWidget(self.pushButtonOutput)
        self.pushButtonImgQuality = QtWidgets.QPushButton(self.tab)
        self.pushButtonImgQuality.setObjectName("pushButtonImgQuality")
        self.verticalLayout.addWidget(self.pushButtonImgQuality)
        self.pushButtonTrans = QtWidgets.QPushButton(self.tab)
        self.pushButtonTrans.setObjectName("pushButtonTrans")
        self.verticalLayout.addWidget(self.pushButtonTrans)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.lineEditInput = QtWidgets.QLineEdit(self.tab)
        self.lineEditInput.setObjectName("lineEditInput")
        self.lineEditInput.setReadOnly(True)
        self.verticalLayout_2.addWidget(self.lineEditInput)
        self.lineEditOutput = QtWidgets.QLineEdit(self.tab)
        self.lineEditOutput.setObjectName("lineEditOutput")
        self.lineEditOutput.setReadOnly(True)
        self.filenameOutput = get_desktop()
        self.lineEditOutput.setText(self.filenameOutput)
        self.verticalLayout_2.addWidget(self.lineEditOutput)
        self.horizontalSlider = QtWidgets.QSlider(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.horizontalSlider.sizePolicy().hasHeightForWidth())
        self.horizontalSlider.setSizePolicy(sizePolicy)
        self.horizontalSlider.setMaximum(100)
        self.horizontalSlider.setSliderPosition(100)
        self.horizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider.setObjectName("horizontalSlider")
        self.verticalLayout_2.addWidget(self.horizontalSlider)
        self.progressBar = QtWidgets.QProgressBar(self.tab)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_2.addWidget(self.progressBar)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 796, 22))
        self.menubar.setObjectName("menubar")
        self.menutoolbox = QtWidgets.QMenu(self.menubar)
        self.menutoolbox.setObjectName("menutoolbox")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.menutoolbox.addSeparator()
        self.menubar.addAction(self.menutoolbox.menuAction())
        self.setConnect()
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":icon.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)

        self.initThread()       

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "fyrr-toolbox"))
        self.pushButtonInput.setText(_translate("MainWindow", "输入文件路径(pdf)"))
        self.pushButtonOutput.setText(_translate("MainWindow", "输出文件路径(jpg)"))
        self.pushButtonImgQuality.setText(_translate("MainWindow", "图片质量"))
        self.pushButtonTrans.setText(_translate("MainWindow", "转换"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "pdf转jpg"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Tab 2"))
        # self.menutoolbox.setTitle(_translate("MainWindow", "fyrr-toolbox"))
    def setConnect(self):
        self.pushButtonInput.clicked.connect(self.loadPathInput)
        self.pushButtonOutput.clicked.connect(self.loadPathOut)
        self.pushButtonTrans.clicked.connect(self.translate)
    def loadPathInput(self):
        # 直接创建QFileDialog，第二种方法
        # 创建对象
        dialog = QtWidgets.QFileDialog()
        # 设置文件创建模式
        dialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        # 选择文件
        dialog.setFilter(QtCore.QDir.Files)

        #打开文件
        if dialog.exec():
            # 如果打开成功
            self.filenameInput = dialog.selectedFiles()[0]
            # self.filenameInput = QtWidgets.QFileDialog.dialog.getOpenFileName(self,'打开文件','.','pdf文件(*.pdf)')[0]
            self.lineEditInput.setText(self.filenameInput)
            self.progressBar.setProperty("value", 0)
    def loadPathOut(self):
        # 直接创建QFileDialog，第二种方法
        # 创建对象
        dialog = QtWidgets.QFileDialog()
        # 设置文件创建模式
        dialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        # 选择文件
        dialog.setFilter(QtCore.QDir.Files)

        #打开文件
        if dialog.exec():
            # 如果打开成功
            self.filenameOutput = dialog.selectedFiles()[0]
            self.lineEditOutput.setText(self.filenameOutput)
            self.progressBar.setProperty("value", 0)

    def initThread(self):
        self.threads = []
        for i in range(threadNum):
            t = MyThread()
            t.progressSignal.connect(self.updateProgressBar)
            self.threads.append(t)
            
    def setThreadPara(self,filenameInput,ppmout,picOut,outputFmt,number_of_pages):
        for i in range(threadNum):
            self.threads[i].setPara(filenameInput,ppmout,picOut,outputFmt,number_of_pages,int(number_of_pages/threadNum*i)+1,int(number_of_pages/threadNum*(i+1)))

    def startThread(self):
        for i in range(threadNum):
            self.threads[i].start()

    def translate(self):
        self.pushButtonTrans.setEnabled(False)
        self.progressBar.setProperty("value", 0)
        global finishedPages
        finishedPages = 0

        filename = os.path.split(self.filenameInput)[1].split('.')[0]
        outputpath = self.filenameOutput
        while(os.path.exists(outputpath)):
            outputpath = os.path.join(outputpath,filename+'_'+str(uuid.uuid1()))
        if(not os.path.exists(outputpath)):
            os.mkdir(outputpath)
        
        reader = PdfReader(self.filenameInput)
        number_of_pages = len(reader.pages)
        
        ppmout = os.path.join(outputpath,'ppm')
        if(not os.path.exists(ppmout)):
            os.mkdir(ppmout)

        outputFmt = 'jpg'
        picOut = os.path.join(outputpath,outputFmt)
        if(not os.path.exists(picOut)):
            os.mkdir(picOut)
            
        self.setThreadPara(self.filenameInput,ppmout,picOut,outputFmt,number_of_pages) 
        self.startThread()
        
        
    def updateProgressBar(self,progress):
        self.progressBar.setProperty("value", progress)
        if(progress==100):
            self.pushButtonTrans.setEnabled(True)

class MyThread(QtCore.QThread):
    progressSignal = QtCore.pyqtSignal(int)
    def __init__(self, parent=None) -> None:
        super().__init__(parent)
    def setPara(self,filenameInput,ppmout,picOut,outputFmt,number_of_pages,first_page,last_page):
        self.filenameInput = filenameInput
        self.ppmout = ppmout
        self.picOut = picOut
        self.outputFmt = outputFmt
        self.number_of_pages = number_of_pages
        self.first_page = first_page
        self.last_page = last_page
    def run(self) -> None:
        for i in range(self.first_page,self.last_page+1):
            infile = convert_from_path(self.filenameInput,output_folder=self.ppmout,first_page=i,last_page=i,paths_only=True)[0]
            outfile = os.path.join(self.picOut,str(i)+'.'+self.outputFmt)
            try:
                with Image.open(infile) as im:
                    im.save(outfile)
            except OSError:
                print("cannot convert", infile)
            qmut.lock()
            global finishedPages
            finishedPages+=1
            self.progressSignal.emit(finishedPages*100/self.number_of_pages)
            qmut.unlock()            
        if(finishedPages == self.number_of_pages):
            os.startfile(self.picOut)       


        

